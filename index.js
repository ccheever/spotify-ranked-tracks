// Generated by CoffeeScript 1.9.2
(function() {
  var _apiUrl, _escape, allAlbumIds, allTracksFromAlbumIds, apiCall, app, artistId, express, fibrous, htmlForTracks, market, pluck, popularTracksByArtist, ref, request, segment, server, sortBy,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  express = require('express');

  fibrous = require('use-global-fibrous');

  request = require('request');

  ref = require('lodash-node'), pluck = ref.pluck, sortBy = ref.sortBy;

  market = 'US';

  _apiUrl = function(method, params) {
    "The URL for an API call";
    var host, key, paramList, val, version;
    host = "api.spotify.com";
    version = "v1";
    paramList = [];
    for (key in params) {
      val = params[key];
      paramList.push((encodeURIComponent(key)) + "=" + (encodeURIComponent(val)));
    }
    return "https://" + host + "/" + version + "/" + method + "?" + (paramList.join('&'));
  };

  apiCall = fibrous(function(method, params) {
    "Calls Spotify's API";
    var response, url;
    url = _apiUrl(method, params);
    console.log("Spotify API call: ", url);
    response = request.sync(url);
    try {
      return JSON.parse(response.body);
    } catch (_error) {
      return null;
    }
  });

  artistId = fibrous(function(artistName) {
    "Gets a Spotify artistId from a search query for artist name";
    var ref1, ref2, ref3, result;
    result = apiCall.sync('search', {
      q: artistName,
      type: 'artist',
      market: market,
      limit: 1,
      offset: 0
    });
    return result != null ? (ref1 = result.artists) != null ? (ref2 = ref1.items) != null ? (ref3 = ref2[0]) != null ? ref3.id : void 0 : void 0 : void 0 : void 0;
  });

  allAlbumIds = fibrous(function(artistId) {
    "Gets all the albums on Spotify of a given artist";
    var a, albums, j, len, result, results;
    result = apiCall.sync("artists/" + artistId + "/albums", {
      market: market,
      limit: 50,
      offset: 0
    });
    albums = result != null ? result.items : void 0;
    if (albums != null) {
      results = [];
      for (j = 0, len = albums.length; j < len; j++) {
        a = albums[j];
        results.push(a.id);
      }
      return results;
    } else {
      return [];
    }
  });

  segment = function(list, step) {
    "Segments a list of things into a series of lists of length at most `step`";
    var i, j, len, offset, ref1, results;
    ref1 = (function() {
      var k, ref1, ref2, results1;
      results1 = [];
      for (i = k = 0, ref1 = list.length, ref2 = step; ref2 > 0 ? k < ref1 : k > ref1; i = k += ref2) {
        results1.push(i);
      }
      return results1;
    })();
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      offset = ref1[j];
      results.push(list.slice(offset, offset + step));
    }
    return results;
  };

  allTracksFromAlbumIds = fibrous(function(albumIds) {
    "Gets all the track ids from a bunch of albumIds";
    var a, b, futures, j, k, len, len1, popularTracks, s, segments, t, trackIds, tracks, x;
    segments = segment(albumIds, 20);
    futures = [];
    for (j = 0, len = segments.length; j < len; j++) {
      s = segments[j];
      futures.push(apiCall.future('albums', {
        ids: s.join(',')
      }));
    }
    trackIds = (function() {
      var k, len1, ref1, ref2, results;
      ref2 = (ref1 = Array.prototype).concat.apply(ref1, (function() {
        var l, len1, ref1, ref2, results1;
        ref2 = (ref1 = Array.prototype).concat.apply(ref1, (function() {
          var len1, m, ref1, results2;
          ref1 = fibrous.wait(futures);
          results2 = [];
          for (m = 0, len1 = ref1.length; m < len1; m++) {
            b = ref1[m];
            results2.push((function() {
              var len2, o, ref2, ref3, results3;
              ref2 = b != null ? b.albums : void 0;
              results3 = [];
              for (o = 0, len2 = ref2.length; o < len2; o++) {
                a = ref2[o];
                results3.push(a != null ? (ref3 = a.tracks) != null ? ref3.items : void 0 : void 0);
              }
              return results3;
            })());
          }
          return results2;
        })());
        results1 = [];
        for (l = 0, len1 = ref2.length; l < len1; l++) {
          t = ref2[l];
          results1.push(t);
        }
        return results1;
      })());
      results = [];
      for (k = 0, len1 = ref2.length; k < len1; k++) {
        x = ref2[k];
        results.push(x.id);
      }
      return results;
    })();
    segments = segment(trackIds, 50);
    futures = [];
    for (k = 0, len1 = segments.length; k < len1; k++) {
      s = segments[k];
      futures.push(apiCall.future('tracks', {
        ids: s.join(',')
      }));
    }
    tracks = (function() {
      var l, len2, ref1, ref2, results;
      ref2 = (ref1 = Array.prototype).concat.apply(ref1, (function() {
        var len2, m, ref1, results1;
        ref1 = fibrous.wait(futures);
        results1 = [];
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          x = ref1[m];
          results1.push(x != null ? x.tracks : void 0);
        }
        return results1;
      })());
      results = [];
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        t = ref2[l];
        results.push({
          id: t.id,
          name: t.name,
          href: t.href,
          uri: t.uri,
          popularity: t.popularity
        });
      }
      return results;
    })();
    popularTracks = sortBy(tracks, 'popularity');
    return popularTracks.reverse();
  });

  popularTracksByArtist = fibrous(function(artistName) {
    "Given an artist name, list all their tracks";
    var _artistId, albumIds;
    _artistId = artistId.sync(artistName);
    albumIds = allAlbumIds.sync(_artistId);
    return allTracksFromAlbumIds.sync(albumIds);
  });

  _escape = function(text) {
    "HTML escape";
    return text.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
  };

  htmlForTracks = function(tracks) {
    "Returns HTML for a bunch of tracks";
    var f, fields, html, j, k, l, len, len1, len2, n, t, val, x;
    fields = ['id', 'popularity', 'name', 'uri'];
    html = "<style>BODY { font-family: Helvetica; font-size: 10pt; }</style><table><tr><th>#</th>";
    for (j = 0, len = fields.length; j < len; j++) {
      f = fields[j];
      html += "<th>" + f + "</th>";
    }
    html += "</tr>";
    n = 0;
    for (k = 0, len1 = tracks.length; k < len1; k++) {
      t = tracks[k];
      html += "<tr>";
      n++;
      html += "<td>" + n + "</td>";
      for (l = 0, len2 = fields.length; l < len2; l++) {
        f = fields[l];
        x = t[f];
        if (indexOf.call(x, ':') >= 0) {
          val = "<a href=\"" + x + "\">" + x + "</a>";
        } else {
          val = _escape(x);
        }
        html += "<td>" + val + "</td>";
      }
      html += "</tr>";
    }
    return html += "</table>";
  };

  if (require.main === module) {
    app = express();
    app.get('/', function(req, res) {
      return res.send("Hello world!");
    });
    app.get("/tracks/:artistName", function(req, res) {
      return fibrous.run(function() {
        var tracks;
        tracks = popularTracksByArtist.sync(req.params.artistName);
        return res.send(htmlForTracks(tracks));
      });
    });
    server = app.listen(3000, function() {
      var host, port;
      host = server.address().address;
      port = server.address().port;
      return console.log("Top tracks app listening at http://%s:%s", host, port);
    });
  }

  module.exports = {
    htmlForTracks: htmlForTracks,
    popularTracksByArtist: popularTracksByArtist,
    allTracksFromAlbumIds: allTracksFromAlbumIds,
    allAlbumIds: allAlbumIds,
    artistId: artistId,
    apiCall: apiCall,
    _apiUrl: _apiUrl
  };

}).call(this);
